// Copyright (c) 2020-2023 by the Zeek Project. See LICENSE for details.

/** Interface for HILTI declarations. */
class Declaration(trait::isDeclaration) : trait::isNode {
    /** Returns the declaration's ID. */
    ID id() const;

    /** Returns the declaration's linkage. */
    Linkage linkage() const;

    /**
     * Returns true if one cannot assign to what this declaration defines.
     */
    bool isConstant() const;

    /**
     * Returns the canonical ID associated with the declaration. Canonical IDs
     * are automatically computed during AST processing and guaranteed to be
     * globally unique and stable across runs.
     */
    const ID& canonicalID() const;

    /**
     * Associates a canonical ID with the declaration. To be called from AST
     * processing.
     */
    void setCanonicalID(ID id);

    /**
     * Returns a user-friendly name for the type of object the declaration
     * refers to. This is used in error messages.
     */
    std::string displayName() const;

    /** Returns the documentation associated with the declaration, if any. */
    const std::optional<DocString>& documentation() const;

    /** Sets the documentation associated with the declaration. */
    void setDocumentation(DocString doc);

    /**
     * Returns true if the declaration is equivalent to another one in HILTI
     * semantics.
     */
    bool isEqual(const hilti::Declaration& other) const;

    /** Implements the `Node` interface. */
    hilti::node::Properties properties() const;

    /** Implements the `Node` interface. */
    const std::vector<hilti::Node>& children() const;

    /** Implements the `Node` interface. */
    std::vector<hilti::Node>& children();

    /** Implements the `Node` interface. */
    const Meta& meta() const;

    /** Implements the `Node` interface. */
    void setMeta(Meta m);

    /** Implements the `Node` interface. */
    bool pruneWalk() const;
};
