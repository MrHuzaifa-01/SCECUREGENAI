// Copyright (c) 2020-2023 by the Zeek Project. See LICENSE for details.

/** Interface for HILTI constructors. */
class Ctor(trait::isCtor) : trait::isNode {
    /** Returns the HILTI `Type` of the constructor's value. */
    const Type& type() const;

    /**
     * Returns true if the constructor's value is a value that will never
     * change.
     */
    bool isConstant() const;

    /** Returns true if the ctor can be the target of an assignment. */
    bool isLhs() const;

    /**
     * Returns true if, when evaluated as RHS, the ctor will yield a
     * temporary value.
     */
    bool isTemporary() const;

    /**
     * Returns true if the constructor's HILTI value is equivalent to another
     * one.
     */
    bool isEqual(const Ctor& other) const;

    /** Implements the `Node` interface. */
    hilti::node::Properties properties() const;

    /** Implements the `Node` interface. */
    const std::vector<hilti::Node>& children() const;

    /** Implements the `Node` interface. */
    std::vector<hilti::Node>& children();

    /** Implements the `Node` interface. */
    const Meta& meta() const;

    /** Implements the `Node` interface. */
    void setMeta(Meta m);

    /** Implements the `Node` interface. */
    bool pruneWalk() const;
};
